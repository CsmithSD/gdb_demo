The main_leak executable seems to run fine when run either compiled with
debugging or without.  However, when valgrind is used on it, it becomes clear
that the executable is leaking memory.

valgrind --leak-check=full main_leak inputFile

phinker@linux107 Debug >>valgrind --leak-check=full main_leak inputFile 
==20053== Memcheck, a memory error detector
==20053== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==20053== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==20053== Command: main_leak inputFile
==20053== 
Found 7
10->12->-1->18->6->8->5
Found 6
8->5
==20053== 
==20053== HEAP SUMMARY:
==20053==     in use at exit: 72,872 bytes in 12 blocks
==20053==   total heap usage: 14 allocs, 2 frees, 81,616 bytes allocated
==20053== 
==20053== 40 (8 direct, 32 indirect) bytes in 1 blocks are definitely lost in loss record 1 of 4
==20053==    at 0x4C29158: operator new(unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==20053==    by 0x400FD4: fillList(std::basic_ifstream<char, std::char_traits<char> >&) (io.cpp:5)
==20053==    by 0x400E75: main (main_leak.cpp:19)
==20053== 
==20053== 128 (64 direct, 64 indirect) bytes in 4 blocks are definitely lost in loss record 3 of 4
==20053==    at 0x4C2940D: operator new(unsigned long, std::nothrow_t const&) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==20053==    by 0x401332: linkedList::push_back(int) (linkedList.cpp:45)
==20053==    by 0x401025: fillList(std::basic_ifstream<char, std::char_traits<char> >&) (io.cpp:9)
==20053==    by 0x400E75: main (main_leak.cpp:19)
==20053== 
==20053== LEAK SUMMARY:
==20053==    definitely lost: 72 bytes in 5 blocks
==20053==    indirectly lost: 96 bytes in 6 blocks
==20053==      possibly lost: 0 bytes in 0 blocks
==20053==    still reachable: 72,704 bytes in 1 blocks
==20053==         suppressed: 0 bytes in 0 blocks
==20053== Reachable blocks (those to which a pointer was found) are not shown.
==20053== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==20053== 
==20053== For counts of detected and suppressed errors, rerun with: -v
==20053== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Use the information provided by valgrind to track down and fix the memory
leaks.  Also, note the fundamental problem in the 'pop' functions for the
linkedList class.  Contrast this linkedList implementation with the one
provided by the STL (particularly the interfaces for the pop functions)
and see how they've found a way to avoid this design flaw.
